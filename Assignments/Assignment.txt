Imp - Notes    24-7

creatinga a thread 
1 -> extending the thread class
2 -> implementing runnable interface

all the work of the thread should be written in run method
we can also give name to the thread using constructor

1. extending the thread class
 class className extends Thread{
	className myThread = new Thread();
}


out of the above two method we choose runnable because if we want our class to extends from other class it is possible
but this is not in case of threadmethod or by using extedning thread class

if we want our thread to wait till the other thread exceution we need to join them 
thread.join(thread2)
this means until thread completes its excution thread2 will wait

Thread priority --> number 1 - 10 that decides how much time cpu will allocate to thread to execute





lowest --> 1--> Thread.MIN_PRIORITY
normal --> 5 --> Thread.NORM_PRIORITY
highest --> 10 --> Thread.MAX_PRIORITY

default --> 5

synchronization --> it means that thread 1 completes it all task after that thread 2 will start its task execution

DATE --- 25-7


ExecutorService --> thread pool(framework for managing and controlling execution of task)
this helps to prevent multiple thread ..it will allow us to create a thread pool
in which it contains a fixed number of thread and this thread will execute the task
here we ca control which thread and how many number of thread can perform the task


there are two task
1. cpu intensive   -> calculate the count of processors based on that thread should be created
2. i/o intensive   -> higher the number faster is the task is done

Thread pool types

1. newFixedThreadPool  --> number of thread will be given the user
2. newCachedThreadPool  --> create a thread on requirements
3. SingleThreadExecutor --> it creates only single thread
4. ScheduledThreadPool --> schedule task to run on time delay


There is new way to create a thread class
3. Callable --> the basice difference between them is the method 
public int call() instead of public void run()

The interface which have only one abstract method defined in it is called functional interface but can have many default and static methods

Marker interface --> which has no abstract methods - use for tagging the class(like it can perfrom something)


with the help of lamda we can define the method assign to the variable
we can definition of method to another method






26-7

Interface built in
1. Consumer -> accept one argument return nothing method -> void accept(T t) has a variation BiCconsumer
2. Supplier -> return some value but does not accpet method -> get 
3. Predicate -> method -> test accepts one value return boolean variation is BiPredicate
4. Function -> accept one argument and return one value method -> apply



STREAMS: -> sequence of bytes

are of two types
1. Intermediate - 
	a. return a stream
	a. filter
	
2. Terminal
	a. return non stream values ie final output 
	a. forEach(), collect(), reduce

we can perform one operation at a time in stream


29-7

OOAD
SOLID PRINCIPLE

1. S -> single responsibility -> 1 class should have 1 responsibility
2. o -> open for extension closed for modification
3. L -> Liskov Substitution Principle
4. I -> Interface segregation
5. D -> Dependency inversion


composition -> embedding of another class in some another class


31-7

three design patterns 
1) creational  -> how objects must be created --> singleton. builder, factory, abstract factory, prototype
2) Structural -> how you should create classes, interface --> Adapter,facade, decorator, composite, proxy, bridge 
3) Behavioural -> interaction of different objects --> observer, iterator, state design, command, strategy



1)Singletion
	--make constructor private
	--declare a private static reference of same class
	--declare a public static method to get instance of the class

2)Factory 
	--design abstract class and interface and let subclass design its functionalities

3)Abstract Factory 
	--create factory of factories



STRUCTURAL

1. Facade --> hide the complexity of subsystem
2. Adapter -> adapts
3. Decorator -> 







2-8

Association 
	Aggregation -> has a (both operate individually)
		composition -> part of relationship 





BEHAVIOURAL
	-how object must communicate

1. Observer
	as soon as the state of the object(o1) changes certain object perform task
	










+---------------------------------+
|          TicTacToeGame          |
+---------------------------------+
| - board: char[][]                |
| - player1Turn: boolean           |
+---------------------------------+
| + TicTacToeGame()                |
| + makeMove(row: int, col: int): boolean |
| + checkWinner(): char            |
| - playerHasWon(): char           |
| - boardIsFull(): boolean         |
| + getBoard(): char[][]           |
| + isPlayer1Turn(): boolean       |
+---------------------------------+

          ^ 
          | 
          | 
+---------------------------------+
|          TicTacToeFacade         |
+---------------------------------+
| - game: TicTacToeGame            |
| - scanner: Scanner               |
+---------------------------------+
| + TicTacToeFacade()              |
| + startGame()                    |
| - printBoard()                  |
+---------------------------------+

          ^ 
          |
          |

|          TicTacToeTest         |
---------------------------------
| + main(args: String[]): void   |











MAVEN --> 
	1. which gives you a full readymade project structure
	2. it is very easy to add and manage external dependencies

pom.xml --> manage external dependencies


groupId -> package name ->com.aurionpro
artifactId -> project name

main code -> src/main/

test code -> src/test/





TDDD
Red -> testcase
green -> implement






POC - NORMALIZATION
Using normalization we solve the problem of data redundancy and organize the data in different forms

it is a multistep process that set the data into tabular form and removes he duplicate data


1NF -> atomicity of the table should be 1

atomicity -> single cell cannot hold multiple values 1 cell -> 1 value



candidate key is a set of one or more columns that can identify a record uniquely in a table and we can use each candidatekey as primary key

super key -> a set of over one key that can identify a record uniquely in a table and primary key is subset of super key

2NF ->
	it should follow 1NF
	the table should not possess partial dependency
	after split each table should have primary key and relationship between the tables using foreign keys

3NF -> 	
	it should follow 2NF
	there should be no transitive dependency
	can -> non prime (works) 
	but non prime -> non prime(no)
	
BCNF ->
	is should be in 3nf
	lhs of functional dependency should be a candidate key or super key
	

7-08

MODEL -> DATA -> DATABASE

VIEW -> HTML PAGES, JSP PAGES  -> FORMAT

CONTROLLER -> how to show data to view taken care by 



view -> controller -----------fetch----> model ---> view


servlets  -> are the controller


src -> controller
webcontent -> jsp pages


two types of servlets
	1. generic
	2. http

generic
	1. init -> first request incoming call this method
	2. service -> responsible to generate response
		      from second response
	3. destroy -> it destroys the servlets

for http request we use HTTPSERVLET here it have 4 methods

	1. init -> same as generic
	2. destroy -> same as generic
	3. instead of service it have two methods
		a) get
		b) post

we can write either get or post based upon the type of request

init and destroy are optional





STEPS FOR CONNECTION

	1. Register Driver -> Class.forName("com.mysql.cj.jdbc.Driver")
	2. Create connection -> Driver Manager -> getConnection("jdbc:mysql://.....localhost:3306/(databaseName)", "username","password"); -> return object of Connection connection
	3. check the connection
	4. To execute any query we create statement object
		to execute query we have object ResultSet dbData = statement.executeQuery
	5. if want to insert,update,delete the data -> use executeUpdate()

To minimize the efforts for writing the whole query we can use PreparedStatement instead of Statement
it is use to execute the parameterized query





BATCH PROCESSING - 
	rather than executing mutiple statement differently we make a batch of them and execute all of them at once
resource efficient
company -> send mail

1-> setAutocommit -> false as we want to commit after our batch is ready
array -> no of rows affected -> return 1 or 0


TRANSACTION MANAGEMENT
	- To achieve data consistency
	- commit (all process are executed)
	- rollback (none of the process is executed)




JSP -> HTML + SOME JAVA CODE


JSP(.jsp) is converted to Servlet(.java) then it is executed

Jsp -> servlet  ----> translation --> then same as servlet


init --> jsp_init
service --> jsp_service
destroy --> jsp_destroy



TAGS --> 

1) SCRIPLET --> <% %>
2) EXPRESSION --> <%= %>  (no need to use out.print)
3) DECLARATION --> <%! %> (declare method , var, ....etc)
4) COMMENT --> <%-- %>


DIRECTIVE --> TO add the directive <%@ %>
1) PAGE --> applied to whole page <%@ page>
2) INCLUDE --> use to add other file(jsp, html, text,,etc) content in other file <%@ include %>
3) TAGLIB ---> use to add external tag libraries <%@ taglib %>

every http request is considered as new request -> stateless


SESSION TRACKING

1) URL REWRITING ->when a new request is made a client identification is sent to server via url
2) HIDDEN FORM FIELDS -> 
3) COOKIES -> peice of info stored at client generate by server -> for storing info of client at server side


types of cookies 
	1) persisted
	2) non - persisted



HTTP SESSION ->

.getSession() --> returns a session if already exits or create a new one

.getSession(true) --> returns a new session

.getSession(false) --> to fetch pre existing session

.setAttribute(name,value) --> value specify name in particular session

.getAttribute(String name) --> returns value 

.removeAttribute(String name) --> removes the attribute

invalidate() --> destroy the session




















